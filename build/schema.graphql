type SoulboundToken @entity {
  id: ID!
  tokenId: BigInt! # uint256
  createdAtTimestamp: BigInt!
  owner: SpecialAgent!
  tokenType: Int! 
}

type SpecialAgent @entity {
  id: ID!
  soulboundTokens: [SoulboundToken!]! @derivedFrom(field:"owner")
}

type Token @entity {
  id: ID!
  tokenId: BigInt! # uint256
  createdAtTimestamp: BigInt!
  owner: Agent!
}

type Agent @entity {
  id: ID!
  tokens: [Token!]! @derivedFrom(field:"owner")
}
  
type AuctionConfig @entity {
  id: ID!
  duration: BigInt!
  reservePrice: BigInt!
  timeBuffer: BigInt!
  minimumBidIncrement: BigInt!
}

type Auction @entity {
  id: ID!
  startTime: BigInt!
  endTime: BigInt!
  extended: Boolean!
  highestBid: AuctionBid
  winningBid: AuctionBid
  firstBidTime: BigInt
  settled: Boolean!
  bidCount: Int
  tokenId: BigInt! # uint256
  bids: [AuctionBid!]
}


type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelegateChanged @entity(immutable: true) {
  id: Bytes!
  delegator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DelegateVotesChanged @entity(immutable: true) {
  id: Bytes!
  delegate: Bytes! # address
  prevTotalVotes: BigInt! # uint256
  newTotalVotes: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinterUpdated @entity(immutable: true) {
  id: Bytes!
  minter: Bytes! # address
  allowed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerCanceled @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  canceledOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerPending @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  pendingOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerUpdated @entity(immutable: true) {
  id: Bytes!
  prevOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  impl: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionBid @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  bidder: Bytes! # address
  amount: BigInt! # uint256
  extended: Boolean! # bool
  endTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  bidTime: BigInt! # Add bidTime field
  auction: Auction!
}

type AuctionCreated @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  startTime: BigInt! # uint256
  endTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionSettled @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  winner: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DurationUpdated @entity(immutable: true) {
  id: Bytes!
  duration: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionInitialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinBidIncrementPercentageUpdated @entity(immutable: true) {
  id: Bytes!
  minBidIncrementPercentage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionOwnerCanceled @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  canceledOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionOwnerPending @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  pendingOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionOwnerUpdated @entity(immutable: true) {
  id: Bytes!
  prevOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReservePriceUpdated @entity(immutable: true) {
  id: Bytes!
  reservePrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TimeBufferUpdated @entity(immutable: true) {
  id: Bytes!
  timeBuffer: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionUpgraded @entity(immutable: true) {
  id: Bytes!
  impl: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type GovernorInitialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GovernorOwnerCanceled @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  canceledOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GovernorOwnerPending @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  pendingOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GovernorOwnerUpdated @entity(immutable: true) {
  id: Bytes!
  prevOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalCanceled @entity(immutable: true) {
  id: Bytes!
  proposalId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalCreated @entity(immutable: true) {
  id: Bytes!
  proposalId: Bytes! # bytes32
  # targets: [Bytes!]! # address[]
  values: [BigInt!]! # uint256[]
  calldatas: [Bytes!]! # bytes[]
  description: String! # string
  descriptionHash: Bytes! # bytes32
  proposal_proposer: Bytes! # address
  proposal_timeCreated: BigInt! # uint32
  proposal_againstVotes: BigInt! # uint32
  proposal_forVotes: BigInt! # uint32
  proposal_proposalType: Int! # uint8
  proposal_abstainVotes: BigInt! # uint32
  proposal_voteStart: BigInt! # uint32
  proposal_voteEnd: BigInt! # uint32
  proposal_proposalThreshold: BigInt! # uint32
  proposal_quorumVotes: BigInt! # uint32
  proposal_executed: Boolean! # bool
  proposal_canceled: Boolean! # bool
  proposal_vetoed: Boolean! # bool
  voteCount: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalExecuted @entity(immutable: true) {
  id: Bytes!
  proposalId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalQueued @entity(immutable: true) {
  id: Bytes!
  proposalId: Bytes! # bytes32
  eta: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalThresholdBpsUpdated @entity(immutable: true) {
  id: Bytes!
  prevBps: BigInt! # uint256
  newBps: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProposalVetoed @entity(immutable: true) {
  id: Bytes!
  proposalId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QuorumVotesBpsUpdated @entity(immutable: true) {
  id: Bytes!
  prevBps: BigInt! # uint256
  newBps: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GovernorUpgraded @entity(immutable: true) {
  id: Bytes!
  impl: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VetoerUpdated @entity(immutable: true) {
  id: Bytes!
  prevVetoer: Bytes! # address
  newVetoer: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VoteCast @entity(immutable: true) {
  id: Bytes!
  voter: Bytes! # address
  proposalId: Bytes! # bytes32
  support: BigInt!
  weight: BigInt! # uint256
  reason: String! # string
   blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}


type VotingDelayUpdated @entity(immutable: true) {
  id: Bytes!
  prevVotingDelay: BigInt! # uint256
  newVotingDelay: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VotingPeriodUpdated @entity(immutable: true) {
  id: Bytes!
  prevVotingPeriod: BigInt! # uint256
  newVotingPeriod: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type DelayUpdated @entity(immutable: true) {
  id: Bytes!
  prevDelay: BigInt! # uint256
  newDelay: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GracePeriodUpdated @entity(immutable: true) {
  id: Bytes!
  prevGracePeriod: BigInt! # uint256
  newGracePeriod: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryInitialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryOwnerCanceled @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  canceledOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryOwnerPending @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  pendingOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryOwnerUpdated @entity(immutable: true) {
  id: Bytes!
  prevOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransactionCanceled @entity(immutable: true) {
  id: Bytes!
  proposalId: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransactionExecuted @entity(immutable: true) {
  id: Bytes!
  proposalId: Bytes! # bytes32
  # targets: [Bytes!]! # address[]
  values: [BigInt!]! # uint256[]
  payloads: [Bytes!]! # bytes[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransactionScheduled @entity(immutable: true) {
  id: Bytes!
  proposalId: Bytes! # bytes32
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryUpgraded @entity(immutable: true) {
  id: Bytes!
  impl: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type SoulboundTokenApproval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SoulboundTokenApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SoulboundTokenDelegateChanged @entity(immutable: true) {
  id: Bytes!
  delegator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SoulboundTokenDelegateVotesChanged @entity(immutable: true) {
  id: Bytes!
  delegate: Bytes! # address
  prevTotalVotes: BigInt! # uint256
  newTotalVotes: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SoulboundTokenInitialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SoulboundTokenTransfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
